#!/usr/bin/env ruby

require 'notes'
require 'optparse'
require 'paint'
require 'find'

# grep-style display
def pretty_print(note, colors)
  col = Paint[':', :cyan]
  format = Paint['%s', :magenta] + col
  format << Paint['%s', :green] + col
  format << Paint['%s', colors[note.tag] || colors[:custom], :bold] + col
  format << "%s\n"
  printf(format,
         note.source,
         note.line,
         note.tag,
         note.text.rstrip)
end

tags = Notes::TAGS.dup
colors = {
  "TODO"  => 'green',
  "FIXME" => 'yellow',
  "XXX"   => 'red',
  :custom => 'cyan'
}

usage = 'Usage: notes [OPTION]... [FILE]...'

ARGV.options do |o|
  o.version = Notes::VERSION
  o.banner = usage
  o.on(      '--no-todo',  'Do not search TODO tags')  { tags -= ['TODO'] }
  o.on(      '--no-fixme', 'Do not search FIXME tags') { tags -= ['FIXME'] }
  o.on(      '--no-xxx',   'Do not search XXX tags')   { tags -= ['XXX'] }
  o.on('-t', '--tag=TAG',  'Search TAG tags')          { |tag| tags |= [tag] }
  o.on(      '--no-color', 'Do not colorize ouput')    { Paint.mode = 0 }
end

begin
  ARGV.options.parse!
rescue => e
  STDERR.puts "notes: #{e.message}"
  STDERR.puts usage
  STDERR.puts "Try `notes --help' for more information."
  exit 1
end

scanner = Notes::Scanner.new
scanner.tags = tags
scanner.on_note do |note|
  pretty_print(note, colors)
end

paths = ARGV.dup
paths.empty? and paths << Dir.pwd

# NOTE Find.find raises when paths contains a broken symlink
Find.find(*paths) do |path|
  unless paths.include? path
    Find.prune if File.basename(path).start_with? '.'
  end
  next if File.directory? path

  begin
    scanner.scan_file(path)
  rescue => e
    STDERR.puts "notes: #{path}: #{e.message}"
  end
end

exit
