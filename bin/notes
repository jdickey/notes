#!/usr/bin/env ruby

# ------------------------------------------------------------------------------
# "THE BEER-WARE LICENSE" (Revision 42):
# <vivien.didelot@gmail.com> wrote this file. As long as you retain this notice
# you can do whatever you want with this stuff. If we meet some day, and you
# think this stuff is worth it, you can buy me a beer in return. Vivien Didelot
# ------------------------------------------------------------------------------

# Command line tool to grep annotations from source files.
# Author:: Vivien 'v0n' Didelot <vivien.didelot@gmail.com>

require 'notes'
require 'paint'
require 'optparse'
require 'find'

tags = Notes::DEFAULT_TAGS.dup
lang = nil # when reading from STDIN
ARGV.options do |o|
  o.banner =<<EOD
Usage:
    notes [OPTIONS] [FILE]...
    notes [OPTIONS] -l LANG -
Search recursively for annotations in source code.
By default, notes will search for all annotations in current directory.
EOD
  o.on_head("Available options:")
  Notes::DEFAULT_TAGS.each do |tag|
    o.on('', "--[no-]#{tag.to_s}", "Search #{tag.to_s.upcase} annotations") { |flag| (flag) ? tags.concat([tag]).uniq! : tags.delete(tag) }
  end
  o.on("-c", "--custom=TAG", String, "Search TAG annotations") { |tag| tags.concat([tag]).uniq! }
  o.on("-v", "--version",            "Print notes version")    { puts "notes: version #{Notes::VERSION}" ; exit }
  o.on("-l", "--lang=LANG",  String, "Specify language (when reading from STDIN)") { |l| lang = l.downcase.to_sym }

  o.on_tail("Example: notes -c IMPROVE test.c lib\nwill search for TODO, FIXME, OPTIMIZE, NOTE, and IMPROVE annotations in test.c and lib/ directory.")
end

begin
  ARGV.options.parse!
  paths = ARGV.dup
  paths.empty? and paths << '.'

  colors = {
    :todo     => :yellow,
    :fixme    => :red,
    :optimize => :green,
    :note     => :white,
    :custom   => :blue
  }

  if paths.first == "-"
    # Read from STDIN
    lang.nil? and raise ArgumentError, "must supply a language"
    code = STDIN.read
    Notes.scan(code, lang, tags) do |text, kind, line|
      printf("%s: %s: %s\n", line, kind.to_s.upercase, text)
    end
  else
    scanner = Notes::Scanner.new
    scanner.annotations = tags
    scanner.on_annotation do |text, kind, line|
      printf("%s:%s: %s: %s\n",
             Paint[f, :magenta], line,
             Paint[kind.to_s.upercase, colors[kind]], text)
    end

    Find.find(*paths) do |f|
      next if File.directory?(f)
      scanner.scan_file(f) # FIXME callback block doesn't seem to do called
    end
  end
rescue => e
  raise e
  #STDERR.puts "Oops, #{e}"
end

exit
