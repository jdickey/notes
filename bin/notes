#!/usr/bin/env ruby

# ------------------------------------------------------------------------------
# "THE BEER-WARE LICENSE" (Revision 42):
# <vivien.didelot@gmail.com> wrote this file. As long as you retain this notice
# you can do whatever you want with this stuff. If we meet some day, and you
# think this stuff is worth it, you can buy me a beer in return. Vivien Didelot
# ------------------------------------------------------------------------------

# Command line tool to grep annotations from source files.
# Author:: Vivien 'v0n' Didelot <vivien.didelot@gmail.com>

require 'notes'

require 'rainbow'
require 'optparse'

def display(list)
  list.each do |a|
    color = case a.tag
            when "TODO" then :yellow
            when "FIXME" then :red
            when "OPTIMIZE" then :green
            else :blue
            end

    printf("%s:%s: %s: %s\n",
           a.file.color(:magenta), a.line, a.tag.color(color), a.text)
  end
end

tags = []
target = []
file = nil

ARGV.options do |o|
  o.banner = "Usage: #{File.basename $0} [options] [file...]\n"
  o.banner << "Search recursively for annotations in source code.\n"
  o.banner << "By default, #{File.basename $0} will search for all annotations in current directory.\n"

  o.on_head("Available options:")
  o.on("-a", "--all",                "Search TODO, FIXME and OPTIMIZE annotations") { tags << TAGS }
  o.on("-t", "--todo",               "Search TODO annotations")                     { tags << "TODO" }
  o.on("-f", "--fixme",              "Search FIXME annotations")                    { tags << "FIXME" }
  o.on("-i", "--improve",            "Search OPTIMIZE annotations")                 { tags << "OPTIMIZE" }
  o.on("-c", "--custom=TAG", String, "Search TAG annotations")                      { |v| tags << v }
  o.on("-o", "--out=FILE",   String, "Save output in FILE")                         { |v| file = v }
  o.on("-v", "--version",            "Print notes version")                         { puts "notes: version #{NOTES_VERSION}" ; exit }

  o.on_tail("Example: #{File.basename $0} -ac IMPROVE test.c lib\nwill search for TODO, FIXME, OPTIMIZE and IMPROVE annotations in test.c lib directory.")
end

begin
  ARGV.options.parse!
  tags = tags.empty? ? Notes::TAGS : tags.flatten
  target = ARGV

  notes = Notes::Reader.new(target)
  notes.find(tags)

  file.nil? ? display(notes.list) : notes.write(file)
rescue => e
  STDERR.puts "error: #{e}"
end

exit
